基本的awk语法：

awk -Fs '/pattern/ {action}'  input-file
or
awk -Fs '{action}' input-file

-F  参数指定字段分隔符，如果你没有指定，则以空格作为分隔符。

    模式匹配和处理操作的行为应该放在单引号中

    模式匹配是可选的，如果你不指定，awk会处理输入文件流的所有记录；
    如果你指定了，awk则会处理仅匹配的记录。

    {action} 这个是awk程序的命令，可以是一个或者多个。操作指令应该用大括号括起来。

    input-file  被awk命令处理的文件。



   awk   -F: '/mail/ {print $1}' /etc/passwd

   -F:          指定分隔符为冒号切割文件行为单个string串；
   /mail/       指定模式匹配,即正则表达式匹配包含mail的string串；
   {print $1}   打印打印包含该行的第一个 string串；
   /etc/passwd  读取要匹配的文件。



   Awk 命令分割文件(使用脚本处理文件用 -f 参数，后面为指定的awk脚本处理命令)

   awk -Fs -f myscript.awk input-file

   awk -f myscript.awk input-file


awk 程序结构（BEGIN,body,END block)

    BEGIN { awk-command }

    切忌： 
        BEGIN block仅执行一次，在执行body block之前；
        1.begin block 是打印report headers和初始化变量的地方；
        2.你可以在begin block中写一个或多个awk命令；
        3.关键字BEGIN 必须大写；
        4.BEGIN block 是可选的；

   Body Block
        Syntax of body block：
        /pattern/ {action}
        body block对输入文件中的每一行执行一次。
        1. 如果input-file有10条记录，body block命令就会执行10次。
        2. body block中没有关键字，相对BEGIN block的BEGIN关键字而言


    END Block
        END { awk-command }
        END block仅在程序结束时执行一次，
        即在awk完成执行input-file中的所有行的body block之后执行一次；
        1.END block是一个打印report footer和做清理操作的地方；
        2.你可以在END block中放一个或多个awk命令；
        3.关键字END应该被指定，并注意大写；
        4.END block也是可选的；

awk程序的执行流程：
==================================================================
begin block；

while（line.read != !EOF）{
    Read a line;
    execute awk commands in the body block on the line
    (# Repeat for the next line until end of the input file)
}

end block;
==================================================================



一、
awk 'BEGIN {FS=":"; print "---header---"} \
/mail/ {print $1} \
END {print "--footer---"}' /etc/passwd

结果：
---header---
mail
---footer---

注意： 如果有多行命令，可以使用 \ 分隔开来；


可以把这些命令弄成一个可执行文件：
例如 myscript.awk

二、
chmod a+x myscript.awk

三、
也可以忽略掉BEGIN和END
awk -F: '{print $1}' /etc/passwd

四、
awk -F: 'BEGIN {printf "username\n------\n"} \
{print $1} \
END {print "------" }' /etc/passwd

五、
awk -F: 'BEGIN {print "UID"} {print $3}' /etc/passwd


仅仅用BEGIN block也是可以的

awk 'BEGIN {print "Hello World!"}'


awk 处理多文件

awk 'BEGIN {FS=":"; print "---header---"} \
/mail/ {print $1} \
END {print "---footer---"}' /etc/passwd /etc/group


print 命令如果不指定具体参数，则会打印当前行的所有数据
$0 参数默认是整行记录；
awk '{print}' employee.txt
awk '{print $0}' employee.txt
这两条语句的效果相同

awk -F: {print} employee.txt

awk命令的字段分隔符 可以用单独的单引号，双引号，或者不用引号，直接写在-F参数后面

awk -F ',' '{print $2}' employee.txt

awk -F "," '{print $2}' employee.txt

awk -F, '{print $2 }' employee.txt

读取文件，打印第二个和第三个参数；
awk -F ',' 'BEGIN \
{print "---------\nName\tTitle\n--------"} \
{print $2,"\t",$3} \
END {print "-----------";} employee.txt

从文件中搜索包含Manager关键字的行，打印该行的第二，第三个参数（参数分隔用逗号）

awk -F ',' '/Manager/ {print $2,$3}' employee.txt

打印在文件中以102开头的字符串行；
awk -F ',' '/^102/ {print "Emp id 102 is",$2}' employee.txt


Chapter 9 .   awk 内置变量
默认字段分隔符为空格(可以是一个或多个空格)，可以省略不写，也可以用-F参数指定，还可以使用内置变量FS指定
awk -F ',' '{print $2,$3}' employee.txt

awk 'BEGIN {FS=","} {print $2,$3}' employee.txt

如果文件中有不同的字段分隔符，例如employee-multiple-fs.txt文件
我们可以这样指定：
FS(Field Separator)的全称是IFS(Input Field Separator)
awk 'BEGIN {FS="[,:%"} {print $2,$3}' employee-multiple-fs.txt

OFS(Output Field Separator) awk的默认OFS是空格

awk -F ',' 'BEGIN {OFS=":"} {print $2,$3}' employee.txt

默认的OFS：空格
awk 'BEGIN {print "test1","test2"}' 
如果没有冒号(comma)分隔连个参数，则表示连默认OFS也不使用
awk 'BEGIN {print "test1" "test2"}'


RS(Record Separator)记录分隔符，代表一条记录，awk处理的基本单就是一条记录，如果不指定，则是一行

awk -F, '{print $2}' employee-one-line.txt

awk -F, 'BEGIN {RS=":"} {print $2}' employee-one-line.txt

IFS 可以简写为FS，输入行内分隔符，默认空格； OFS 输出行内分隔符，默认空格；
IRS 可以简写为RS 输入行分隔符，默认为new line(换行)； ORS是输出行分隔符
 
awk 'BEGIN {FS=","; ORS="\n---\n";} {print $2,$3}' employee.txt

awk 'BEGIN {FS=","; OFS="\n";ORS="\n---\n"} {print $2,$3}' employee.txt

NR  (Number of Records)

awk 'BEGIN {FS=","} {print "The",NR,"Row EmpId is",$1} END{print "Total rows is ",NR}' employee.txt

FILENAME - Current File Name


读取标准输入内容：
stdin

awk '{print "Last Name:" $2 print "FileName:",FILENAME}
输入大于两个字符串，默认用空格区分；该程序会打印第二个字符串，文件名没有参数会打印“-” 参数

echo "John Doe" | awk '{print "Last Name:",$2 print "FileName:",FILENAME}'

awk 需要输入处理的文件，如果awk命令后面没有处理的文件，则会从stdin获取数据

NR 

awk 'BEGIN {FS=","} {print FILENAME ":record Number",NR,"is",$1;} \
END{print "Total Number of Records:",NR} \
employee.txt employee-multiple-fs.txt

FNR

awk 'BEGIN {FS=","}\
{print FILENAME ":record Number",FNR,"is",$1 } \
END {print "Total number of records:",NR}' \
employee.txt employee-multiple-fs.txt



Awk VAriables and Operators   awk 变量，无数据类型声明，随场景变化

awk -f total-company-salary.awk employee-sal.txt

一元操作：

awk -F, '{print -$4}' employee-sal.txt

awk '{print +$1}' negative.txt

awk '{print -$1}' negative.txt

awk -F ',' '{$4--; print $4}' employee-sal.txt

~ 的用法；
~  Match operator 
!~ No Match operator
== full match 

Awk 条件语句和循环

if(conditional-expression)
    action

如果有多个行为
if(conditional-expression){
    action1;
    action2;
}

awk if-else 语句：

if(conditional-expression)
    action1;
else
    action2;

Ternary Operator (三木表达式)
conditional-expression ? action1:action2;

awk 'ORS=NR%2?",":"\n"' items.txt

while 循环；
while(condition)
actions

do-While 循环；
do
action
while(condition)

for循环
for(initialization;condition;increment/decrement)
actions

awk 'BEGIN {while(1) print "forever"}'
死循环；
although forever loops are used in process control or operating system applications


Awk Associative Arrays (awk数组)

awk数组基本语法：
arrayname[string]=value

awk数组的索引值总是字符串，即使你给它传递了数字，它也会默认转换为字符串；
item[101]="HD Camcorder"
item["101"]="HD Camcorder"

print item[101]
x=item[105]

如果你引用的数据数组索引不存在，awk会自动在该索引下创建该元素，并分配null值。

使用循环遍历数组：
for(var in arrayname)
actions;

删除awk数组元素：
delete arrayname[index]

for(var in array)
delete array[var]

在GAWK中，delete array 可以删除该数组的所有元素。

在awk多维数组中，当你不将索引封装在引号中时，awk将使用一个默认值为"\034"的下标分隔符；

item[1,2] --> item["1\0342"]

可以通过内置变量SUBSEP修改默认的分隔符
   SUBSEP=":"; 即可把默认分隔符修改为:(冒号)



Additional Awk Commands (額外的awk命令)
printf 更好用的打印
syntax： printf "print format",variable1,variable2,etc

\n  new line
\t  Tab
\v  vertical Tab
\b  backspace
\r  Carriage Return
\f  form Feed


Printf Format Specifiers
s             string
c             single Character
d             decimal
e             exponential Floating point
f             fixed floating point
g             uses either e or f depending on which is smaller for the given input
o             Octal
x             Hexadecimal
%             Prints the percentage symbol


